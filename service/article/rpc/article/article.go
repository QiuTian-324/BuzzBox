// Code generated by goctl. DO NOT EDIT.
// Source: article.proto

package article

import (
	"context"

	"BuzzBox/service/article/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ArticleDeleteRequest   = pb.ArticleDeleteRequest
	ArticleDeleteResponse  = pb.ArticleDeleteResponse
	ArticleDetailRequest   = pb.ArticleDetailRequest
	ArticleDetailResponse  = pb.ArticleDetailResponse
	ArticleInfo            = pb.ArticleInfo
	GetArticleListRequest  = pb.GetArticleListRequest
	GetArticleListResponse = pb.GetArticleListResponse
	PublishArticleRequest  = pb.PublishArticleRequest
	PublishArticleResponse = pb.PublishArticleResponse

	Article interface {
		PublishArticle(ctx context.Context, in *PublishArticleRequest, opts ...grpc.CallOption) (*PublishArticleResponse, error)
		GetArticleList(ctx context.Context, in *GetArticleListRequest, opts ...grpc.CallOption) (*GetArticleListResponse, error)
		ArticleDelete(ctx context.Context, in *ArticleDeleteRequest, opts ...grpc.CallOption) (*ArticleDeleteResponse, error)
		ArticleDetail(ctx context.Context, in *ArticleDetailRequest, opts ...grpc.CallOption) (*ArticleDetailResponse, error)
	}

	defaultArticle struct {
		cli zrpc.Client
	}
)

func NewArticle(cli zrpc.Client) Article {
	return &defaultArticle{
		cli: cli,
	}
}

func (m *defaultArticle) PublishArticle(ctx context.Context, in *PublishArticleRequest, opts ...grpc.CallOption) (*PublishArticleResponse, error) {
	client := pb.NewArticleClient(m.cli.Conn())
	return client.PublishArticle(ctx, in, opts...)
}

func (m *defaultArticle) GetArticleList(ctx context.Context, in *GetArticleListRequest, opts ...grpc.CallOption) (*GetArticleListResponse, error) {
	client := pb.NewArticleClient(m.cli.Conn())
	return client.GetArticleList(ctx, in, opts...)
}

func (m *defaultArticle) ArticleDelete(ctx context.Context, in *ArticleDeleteRequest, opts ...grpc.CallOption) (*ArticleDeleteResponse, error) {
	client := pb.NewArticleClient(m.cli.Conn())
	return client.ArticleDelete(ctx, in, opts...)
}

func (m *defaultArticle) ArticleDetail(ctx context.Context, in *ArticleDetailRequest, opts ...grpc.CallOption) (*ArticleDetailResponse, error) {
	client := pb.NewArticleClient(m.cli.Conn())
	return client.ArticleDetail(ctx, in, opts...)
}
