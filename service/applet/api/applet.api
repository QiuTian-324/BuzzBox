syntax = "v1"

// 定义 Token 结构体，用于表示访问令牌
type Token {
	AccessToken  string `json:"access_token"` // 访问令牌
	AccessExpire int64  `json:"access_expire"` // 访问令牌过期时间
}

// 注册请求结构体
type RegisterRequest {
	Username         string `json:"username"` // 用户名
	Mobile           string `json:"mobile"` // 手机号
	Password         string `json:"password"` // 密码
	VerificationCode string `json:"verification_code"` // 验证码
}

type LoginRequest {
	Mobile   string `json:"mobile"` // 手机号
	Password string `json:"password"` // 密码
}

type LoginResponse {
	ID      int64  `json:"id"` // 用户ID
	Token   Token  `json:"token"` // 访问令牌
	Message string `json:"message"` // 登录成功响应消息
}

// 注册响应结构体
type RegisterResponse {
	ID      int64  `json:"id"` // 用户ID
	Message string `json:"message"` // 注册成功响应消息
}

// 验证请求结构体
type VerificationRequest {
	Mobile string `json:"mobile"` // 手机号
}

// 验证响应结构体
type VerificationResponse {
	Message string `json:"message"` // 验证结果
}

// 用户信息响应结构体
type UserInfoResponse {
	ID        int64  `json:"id"` // 用户ID
	Username  string `json:"username"` // 用户名
	Avatar    string `json:"avatar"` // 头像链接
	Mobile    string `json:"mobile"` // 手机号
	CreatedAt string `json:"created_at"` // 创建时间
	UpdatedAt string `json:"updated_at"` // 更新时间
}

// 定义服务的路由和处理程序
@server (
	prefix: /v1 // 设置路由前缀
)
service applet-api {
	// 注册请求处理程序
	@handler RegisterHandler
	post /register (RegisterRequest) returns (RegisterResponse)

	// 验证请求处理程序
	@handler VerificationHandler
	post /verification (VerificationRequest) returns (VerificationResponse)

	// 登录请求处理程序
	@handler LoginHandler
	post /login (LoginRequest) returns (LoginResponse)
}

// 定义用户信息服务的路由和处理程序，并添加 JWT 签名验证
@server (
	prefix:    /v1/user // 设置路由前缀
	signature: true // 启用签名验证
	jwt:       Auth // 使用 JWT 验证
)
service applet-api {
	// 用户信息请求处理程序
	@handler UserInfoHandler
	get /info returns (UserInfoResponse)
}

